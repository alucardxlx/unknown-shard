using System;
using Server.Items;
using Server.Gumps;

namespace Server.TMSS
{
	// -- TMSS 4.0 -- CORE FILES --
	//Version 4.0.0
	//author TMSTKSBK--developed for Ageless Dawn 2
	//The major classes required to make TMSS 4 interoperable with plugins.
	#region BaseTMSkillItem
	public class BaseTMSkillItem : Item
	{
		#region Variables
		private SuperSkillProfile m_Profile;
		private string m_SkillProfName;
		private bool m_HasProfileSet;
		private string m_SkinName;
		private int m_Points = 0;
		private bool m_AutoGenerated = true;
		#endregion

		#region Public Vars and Command Props
		
		public SuperSkillProfile Profile
		{
			get { return m_Profile; }
			set { m_Profile = value; HasProfileSet = true; m_SkillProfName = Profile.ProfileName; }
		}

		[CommandProperty(AccessLevel.GameMaster)]
		public string SkinNameGive
		{
			get
			{
				if (this.Skin != null)
					return Skin;
				else
					return "No Skin Selected.";
			}
		}

		public string Skin { get { return m_SkinName; } set { m_SkinName = value; } }

		[CommandProperty(AccessLevel.GameMaster)]
		public string SkillProfileName
		{
			get
			{
				if (this.Profile != null)
					m_SkillProfName = Profile.ProfileName;
				else
					m_SkillProfName = "No Profile.";

				return m_SkillProfName;
			}
		}

		[CommandProperty(AccessLevel.GameMaster)]
		public string ProfileToString
		{
			get 
			{
				if( Profile != null )
				return Profile.ToString(); 
				else
					return "No Profile to return.";
			}
		}
		
		[CommandProperty(AccessLevel.GameMaster)]
		public int Points
		{
			get
			{ return m_Points; }
			set
			{ m_Points = value; }
		}

		[CommandProperty(AccessLevel.GameMaster)]
		public bool HasProfileSet
		{
			get { return m_HasProfileSet; }
			set { m_HasProfileSet = value; }
		}

		#endregion

		#region set/get Profile
		public virtual void setProfile( string profile )
		{
			Profile = (SuperSkillProfile)SkillProfileHelper.getProfile( profile );
			this.HasProfileSet = true;
		}
		public virtual int getProfile( )
		{
			return SkillProfileHelper.getProfileID(Profile.ProfileName);
		}
		#endregion

		public BaseTMSkillItem()
		{
			try
			{
				this.Profile = (SuperSkillProfile)SkillProfileHelper.Supers[SkillSettings.CCProfileName];
				this.Skin = ((TMSS4Skin)SkinHelper.getSkin(SkillSettings.CCSkinName)).SkinName;
			}
			catch (Exception e)
			{ SkillSettings.DoTell("Exception in attempting to set profile: " + e); }
			m_AutoGenerated = false;
		}
		public BaseTMSkillItem( bool special, string skName)
		{
			if (special)
			{ m_AutoGenerated = true; this.Skin = skName; }
		}
		public BaseTMSkillItem(int itemid) : base(itemid)
		{
			try
			{
				this.Profile = (SuperSkillProfile)SkillProfileHelper.Supers[SkillSettings.CCProfileName];
				this.Skin = ((TMSS4Skin)SkinHelper.getSkin(SkillSettings.CCSkinName)).SkinName;
			}
			catch (Exception e)
			{ SkillSettings.DoTell("Exception in attempting to set profile: " + e); }
			this.ItemID = itemid;
		}
		public BaseTMSkillItem( string name ) : base()
		{
			this.Name = name;
		}
		public BaseTMSkillItem( Serial serial ) : base( serial ){}

		public override void OnDoubleClick(Mobile from)
		{
			TMSkillSession session = new TMSkillSession(from, this);
			session.Start();
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
			writer.Write((int)5); // version
			writer.Write((bool)HasProfileSet);
			SkillSettings.DoTell2("" + HasProfileSet);

			if (Profile != null && HasProfileSet)
			{
				writer.Write((string)Profile.ProfileName);
				SkillSettings.DoTell2("" + Profile.ProfileName);
			}
			writer.Write( Skin );
		}
		public override void Deserialize( GenericReader reader )
		{
			try
			{
				base.Deserialize(reader);
				int version = reader.ReadInt();

				if (version == 5)
				{
					HasProfileSet = reader.ReadBool();
					SkillSettings.DoTell2("" + HasProfileSet);

					if (HasProfileSet)
					{

						string temp = reader.ReadString();
						if (temp != null)
						{
							SkillSettings.DoTell2(temp);
							if (SkillProfileHelper.ProfileExists(temp))
							{
								Profile = (SuperSkillProfile)SkillProfileHelper.getProfile(temp);
							}
						}
						else
							HasProfileSet = false;
					}
					Skin = reader.ReadString();
				}
				else
				{
					SkillSettings.DoTell2("Version is unknown.");
				}
			}
			catch (Exception e)
			{
				SkillSettings.DoTell("W. T. F. "+e);
			}
		}
	}
	#endregion

	#region BaseSkillStone
	public class BaseTMSkillStone : BaseTMSkillItem
	{
		public virtual void NormalTicket( BaseTMSkillItem item, Mobile from )
		{
		}
		public BaseTMSkillStone( string name ) : base( 0xEDD )
        {
            this.ItemID = 0xEDD;
			this.Movable = false;
        }
		public BaseTMSkillStone(int id) : base(0xEDD)
        {
            this.ItemID = 0xEDD;
			this.Movable = false;
        }
		public BaseTMSkillStone() : base(0xEDD)
		{
			this.ItemID = 0xEDD;
			this.Movable = false;
		}
		public BaseTMSkillStone( Serial serial ) : base( serial )
		{
		}

		public override void Serialize( GenericWriter writer )
		{
			base.Serialize( writer );
		}
		public override void Deserialize( GenericReader reader )
		{
			base.Deserialize( reader );
		}
	}
	#endregion

	#region BaseSkillTicket
	public class BaseTMSkillTicket : BaseTMSkillItem
	{
		#region vars and comprops
		private Mobile m_Owner;
		private bool m_SpecialTicket = false;
		private bool m_RequireOwner = false;
		private int m_SessionCount = 1;

		[CommandProperty(AccessLevel.GameMaster)]
		public bool SpecialTicket
		{
			get { return m_SpecialTicket; }
			set { m_SpecialTicket = value; }
		}

		[CommandProperty(AccessLevel.GameMaster)]
		public bool RequireOwner
		{
			get { return m_RequireOwner; }
			set { m_RequireOwner = value; }
		}

		[CommandProperty(AccessLevel.GameMaster)]
		public Mobile Owner
		{
			get { return m_Owner; }
			set { m_Owner = value; }
		}

		[CommandProperty(AccessLevel.GameMaster)]
		public int SessionCount
		{
			get { return m_SessionCount; }
			set { m_SessionCount = value; }
		}
		#endregion

		public BaseTMSkillTicket(int itemid) : base(itemid)
		{
			this.ItemID = itemid;
			this.Profile = (SuperSkillProfile)SkillProfileHelper.getProfile(SkillSettings.CCProfileName);
			this.Skin = SkillSettings.CCSkinName;
		}

		public BaseTMSkillTicket(string name) : base(name)
		{
			this.ItemID = 0x14F0;	
			this.Profile = (SuperSkillProfile)SkillProfileHelper.getProfile(SkillSettings.CCProfileName);
			this.Skin = SkillSettings.CCSkinName;
		}

		public BaseTMSkillTicket() : base("Skill Ticket")
		{
			this.ItemID = 0x14F0;
			this.Profile = (SuperSkillProfile)SkillProfileHelper.getProfile(SkillSettings.CCProfileName);
			this.Skin = SkillSettings.CCSkinName;
		}

		public BaseTMSkillTicket( Mobile owner )
			: base("A Skill Ticket")
		{
			this.ItemID = 0x14F0;
			this.Profile = (SuperSkillProfile)SkillProfileHelper.getProfile(SkillSettings.CCProfileName);
			this.Skin = SkillSettings.CCSkinName;
			this.Owner = owner;
		}

		public BaseTMSkillTicket(Serial serial) : base(serial) {}

		public override void OnDoubleClick(Mobile from)
		{
			base.OnDoubleClick(from);
		}

		public override void Serialize(GenericWriter writer)
		{
			base.Serialize(writer);
					
			writer.Write((Mobile)m_Owner);
			writer.Write(2);
			//Version 2
			writer.Write(m_SessionCount);
			//End Version 2
			//Version 1
			writer.Write(m_RequireOwner);
			writer.Write(m_SpecialTicket);
			//End Version 1			
		}
		public override void Deserialize(GenericReader reader)
		{
			base.Deserialize(reader);
			m_Owner = (Mobile)reader.ReadMobile();
			try
			{
				int version = (int)reader.ReadInt();
				switch (version)
				{
					case 1:
						m_RequireOwner = reader.ReadBool();
						m_SpecialTicket = reader.ReadBool();
						break;
					case 2:
						m_SessionCount = reader.ReadInt();
						goto case 1;
					default:
						break;
				}
			}
			catch { }			
		}

		internal bool HasCorrectOwner(Mobile m)
		{			
			if ( m == m_Owner )
				return true;
			else
				return false;
		}
	}
	#endregion
}