#region AuthorHeader
//
//	SpellCrafting version 3.0, by Xanthos and TheOutkastDev
//
//  Based on original ideas and code by TheOutkastDev
//
#endregion AuthorHeader
using System;
using System.IO;  
using System.Xml;
using System.Text;
using System.Collections;
using System.Collections.Specialized;
using Xanthos.Utilities;

namespace Server.SpellCrafting
{		
	// This file is for configuration of the Spell Crafting System.  It is advised
	// that you DO NOT edit this file, instead place SpellCraftingConfig.xml in the 
	// RunUO/Data directory and modify the values there to configure the system
	// without changing code.  This allows you to take updates to the system
	// without losing your specific configuration settings.

	public class SpellCraftConfig
	{
		// Configuration variables
		public static bool	ArtifactCraftable = true;
		public static bool	BraceletsRingsOnly = false;
		public static int	MaxPropsAllowed = 5;
		public static double ScPenaltyChance = 0.35;
		public static double ExplodeChance = 0.35;
		public static double DestroyChance = 0.35;
		public static int	ExplodeMinDmg = 20;
		public static int	ExplodeMaxDmg = 40;
		public static double CraftersMarkChance = 0.25;
		public static bool	UseCharges = true;
		public static double GuardianOfTheMagicsBookChance = 0.03;
		public static double GuardianOfTheMagicsJewelChance = 0.35;
		public static int	GuardianOfTheMagicsMagicJewelSpawn = 3;

		public static int	MinimumInscription = 50;
		public static int	MinimumAlchemy = 50;
		public static int	MaximumSkillValue = 100;
		public static int	MinimumIntensity = 2;
		public static int	MaximumIntensity = 10;

		public static bool[] CraftEnabled = new bool[]
		{
			// true if the spellcraft is enabled
			true,// str bonus = 0,
			true,// dex bonus = 1,
			true,// int bonus = 2,
			true,// hp bonus = 3,
			true,// stam bonus = 4,
			true,// mana bonus = 5,
			true,// physical resist = 6,
			true,// fire resist = 7,
			true,// cold resist = 8,
			true,// poison resist = 9,
			true,// energy resist = 10,
			true,// hit point regeneration = 11,
			true,// mana regeneration = 12,
			true,// stamina regeneration = 13,
			true,// faster cast recovery = 14,
			true,// faster cast speed = 15,
			true,// lower mana cost = 16,
			true,// lower reagent cost = 17,
			true,// mage armor = 18,
			true,// mage weapon = 19,
			true,// spell channeling = 20,
			true,// spell damage increase = 21,
			true,// hit cold area = 22,
			true,// hit energy area = 23,
			true,// hit fire area = 24,
			true,// hit physical area = 25,
			true,// hit poison area = 26,
			true,// hit dispel = 27,
			true,// hit fireball = 28,
			true,// hit harm = 29,
			true,// hit lightning = 30,
			true,// hit magic arrow = 31,
			true,// hit lower attack = 32,
			true,// hit lower defense = 33,
			true,// hit leech hits = 34,
			true,// hit leech mana = 35,
			true,// hit leech stamina = 36,
			true,// use best weapon skill = 37,
			true,// weapon damage increase = 38,
			true,// swing speed increase = 39,
			true,// hit chance increase = 40,
			true,// defense chance increase = 41,
			true,// enhance potions = 42,
			true,// lower stat requirements = 43,
			true,// luck = 44,
			true,// reflect physical = 45,
			true,// self repair = 46,
			true,// night sight = 47,
			true,// slayer = 48,
			true,// durability = 49,
		};

		public static int[] MagicJewelRequirements = new int[]
		{
			// The number of Magic Jewels consumed in attempting to apply the craft
			1,// str bonus = 0,
			1,// dex bonus = 1,
			1,// int bonus = 2,
			1,// hp bonus = 3,
			1,// stam bonus = 4,
			1,// mana bonus = 5,
			1,// physical resist = 6,
			1,// fire resist = 7,
			1,// cold resist = 8,
			1,// poison resist = 9,
			1,// energy resist = 10,
			1,// hit point regeneration = 11,
			1,// mana regeneration = 12,
			1,// stamina regeneration = 13,
			1,// faster cast recovery = 14,
			1,// faster cast speed = 15,
			1,// lower mana cost = 16,
			1,// lower reagent cost = 17,
			1,// mage armor = 18,
			1,// mage weapon = 19,
			1,// spell channeling = 20,
			1,// spell damage increase = 21,
			1,// hit cold area = 22,
			1,// hit energy area = 23,
			1,// hit fire area = 24,
			1,// hit physical area = 25,
			1,// hit poison area = 26,
			1,// hit dispel = 27,
			1,// hit fireball = 28,
			1,// hit harm = 29,
			1,// hit lightning = 30,
			1,// hit magic arrow = 31,
			1,// hit lower attack = 32,
			1,// hit lower defense = 33,
			1,// hit leech hits = 34,
			1,// hit leech mana = 35,
			1,// hit leech stamina = 36,
			1,// use best weapon skill = 37,
			1,// weapon damage increase = 38,
			1,// swing speed increase = 39,
			1,// hit chance increase = 40,
			1,// defense chance increase = 41,
			1,// enhance potions = 42,
			1,// lower stat requirements = 43,
			1,// luck = 44,
			1,// reflect physical = 45,
			1,// self repair = 46,
			1,// night sight = 47,
			1,// slayer = 48,
			1,// durability = 49,
		};
 
		public static int LastAosCraftID = 49;

		private const string kConfigFile = @"Data/SpellCraftConfig.xml";
		private const string kConfigName = "SpellCraftingSystem";

		public static void Initialize()
		{
			Element element = ConfigParser.GetConfig( kConfigFile, kConfigName );

			if ( null == element || element.ChildElements.Count <= 0 )
				return;

			double tempDouble;
			bool tempBool;
			int tempInt;
			bool[] tempBoolArray;
			int[] tempIntArray;

			foreach( Element child in element.ChildElements ) 
			{
				if ( child.TagName == "ArtifactCraftable" && child.GetBoolValue( out tempBool ))
					ArtifactCraftable = tempBool;

				else if ( child.TagName == "BraceletsRingsOnly" && child.GetBoolValue( out tempBool ))
					BraceletsRingsOnly = tempBool;

				else if ( child.TagName == "MaxPropsAllowed" && child.GetIntValue( out tempInt ))
					MaxPropsAllowed = tempInt;

				else if ( child.TagName == "ScPenaltyChance" && child.GetDoubleValue( out tempDouble ))
					ScPenaltyChance = tempDouble;
					
				else if ( child.TagName == "ExplodeChance" && child.GetDoubleValue( out tempDouble ))
					ExplodeChance = tempDouble;
					
				else if ( child.TagName == "DestroyChance" && child.GetDoubleValue( out tempDouble ))
					DestroyChance = tempDouble;
					
				else if ( child.TagName == "ExplodeMinDmg" && child.GetIntValue( out tempInt ))
					ExplodeMinDmg = tempInt;

				else if ( child.TagName == "ExplodeMaxDmg" && child.GetIntValue( out tempInt ))
					ExplodeMaxDmg = tempInt;
					
				else if ( child.TagName == "CraftersMarkChance" && child.GetDoubleValue( out tempDouble ))
					CraftersMarkChance = tempDouble;
					
				else if ( child.TagName == "UseCharges" && child.GetBoolValue( out tempBool ))
					UseCharges = tempBool;
					
				else if ( child.TagName == "GuardianOfTheMagicsBookChance" && child.GetDoubleValue( out tempDouble ))
					GuardianOfTheMagicsBookChance = tempDouble;
					
				else if ( child.TagName == "GuardianOfTheMagicsJewelChance" && child.GetDoubleValue( out tempDouble ))
					GuardianOfTheMagicsJewelChance = tempDouble;
					
				else if ( child.TagName == "MinimumInscription" && child.GetIntValue( out tempInt ))
					MinimumInscription = tempInt;
					
				else if ( child.TagName == "MinimumAlchemy" && child.GetIntValue( out tempInt ))
					MinimumAlchemy = tempInt;
					
				else if ( child.TagName == "MaximumSkillValue" && child.GetIntValue( out tempInt ))
					MaximumSkillValue = tempInt;
					
				else if ( child.TagName == "MinimumIntensity" && child.GetIntValue( out tempInt ))
					MinimumIntensity = tempInt;
					
				else if ( child.TagName == "MaximumIntensity" && child.GetIntValue( out tempInt ))
					MaximumIntensity = tempInt;
					
				else if ( child.TagName == "CraftEnabled" && child.GetArray( LastAosCraftID + 1, out tempBoolArray ))
					CraftEnabled = tempBoolArray;

				else if ( child.TagName == "MagicJewelRequirements" && child.GetArray( LastAosCraftID + 1, out tempIntArray ))
					MagicJewelRequirements = tempIntArray;
			}
		}
	}
}